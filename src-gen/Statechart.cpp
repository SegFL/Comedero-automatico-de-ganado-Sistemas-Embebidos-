/** Generated by itemis CREATE code generator. */

#include "Statechart.h"

/*! \file
Implementation of the state machine 'Statechart'
*/




Statechart::Statechart() :
	evManualMode_raised(false),
	evFreeMode_raised(false),
	evTimeMode_raised(false),
	evButtonPressed_raised(false),
	evButtonPressed_value(0),
	evButtonUnpressed_raised(false),
	validEntry_raised(false),
	keyPressed(0),
	timerService(sc_null),
	isExecuting(false),
	stateConfVectorPosition(0)
{
	for (sc_ushort state_vec_pos = 0; state_vec_pos < maxOrthogonalStates; ++state_vec_pos)
		stateConfVector[state_vec_pos] = Statechart_last_state;
	
	clearInEvents();
	clearInternalEvents();
}

Statechart::~Statechart()
{
	while (!internalEventQueue.empty()) {
		statechart_events::SctEvent* nextEvent = internalEventQueue.front();
		internalEventQueue.pop_front();
		delete nextEvent;
	}
	while (!inEventQueue.empty()) {
		statechart_events::SctEvent* nextEvent = inEventQueue.front();
		inEventQueue.pop_front();
		delete nextEvent;
	}
}


using namespace statechart_events;

SctEvent* Statechart::getNextEvent()
{
	SctEvent* nextEvent = 0;
	
	if(!internalEventQueue.empty()) {
		nextEvent = internalEventQueue.front();
		internalEventQueue.pop_front();
	}
	else if(!inEventQueue.empty()) {
		nextEvent = inEventQueue.front();
		inEventQueue.pop_front();
	}
	
	return nextEvent;
}

sc_boolean Statechart::dispatch_event(SctEvent * event)
{
	if(event == 0) {
		return false;
	}
	switch(event->name)
	{
		case evManualMode:
		case evFreeMode:
		case evTimeMode:
		case evButtonPressed:
		case evButtonUnpressed:
		{
			return iface_dispatch_event(event);
		}
		case Internal_validEntry:
		{
			return internal_dispatch_event(event);
		}
		case Statechart_DEBOUNCE_BUTTION_PRESSED_time_event_0:
		{
			delete event;
			return timeEvents[0] = true;
		}
		default:
			delete event;
			return false;
	}
}

sc_boolean Statechart::iface_dispatch_event(SctEvent * event)
{
	switch(event->name)
	{
		case evManualMode:
		{
			internal_raiseEvManualMode();
			break;
		}
		case evFreeMode:
		{
			internal_raiseEvFreeMode();
			break;
		}
		case evTimeMode:
		{
			internal_raiseEvTimeMode();
			break;
		}
		case evButtonPressed:
		{
			SctEvent__evButtonPressed * e = static_cast<SctEvent__evButtonPressed*>(event);
			if(e != 0) {
				internal_raiseEvButtonPressed(e->value);
				break;
			}
			delete event;
			return false;
		}
		case evButtonUnpressed:
		{
			internal_raiseEvButtonUnpressed();
			break;
		}
		default:
			delete event;
			return false;
	}
	delete event;
	return true;
}
sc_boolean Statechart::internal_dispatch_event(SctEvent * event)
{
	switch(event->name)
	{
		case Internal_validEntry:
		{
			internal_raiseValidEntry();
			break;
		}
		default:
			delete event;
			return false;
	}
	delete event;
	return true;
}

StatechartEventName Statechart::getTimedEventName(sc_eventid evid)
{
	if (evid == (sc_eventid)(&timeEvents[0])) {
		return Statechart_DEBOUNCE_BUTTION_PRESSED_time_event_0;
	}
	return invalid_event;
}



sc_boolean Statechart::isActive() const
{
	return stateConfVector[0] != Statechart_last_state||stateConfVector[1] != Statechart_last_state;
}

/* 
 * Always returns 'false' since this state machine can never become final.
 */
sc_boolean Statechart::isFinal() const
{
	   return false;
}

sc_boolean Statechart::check(){
	if(timerService == sc_null) {
		return false;
	}
	return true;
}


void Statechart::setTimerService(sc::timer::TimerServiceInterface* timerService_)
{
	this->timerService = timerService_;
}

sc::timer::TimerServiceInterface* Statechart::getTimerService()
{
	return timerService;
}

sc_integer Statechart::getNumberOfParallelTimeEvents() {
	return parallelTimeEventsCount;
}

void Statechart::raiseTimeEvent(sc_eventid evid)
{
	if ((evid >= (sc_eventid)timeEvents) && (evid < (sc_eventid)(&timeEvents[timeEventsCount])))
	{
		inEventQueue.push_back(new TimedSctEvent(getTimedEventName(evid)));
		runCycle();
	}
}


sc_boolean Statechart::isStateActive(StatechartStates state) const
{
	switch (state)
	{
		case FEEDER_FREE_MODE :
		{
			return (sc_boolean) (stateConfVector[SCVI_FEEDER_FREE_MODE] == FEEDER_FREE_MODE);
			break;
		}
		case FEEDER_MANUAL_MODE :
		{
			return (sc_boolean) (stateConfVector[SCVI_FEEDER_MANUAL_MODE] == FEEDER_MANUAL_MODE);
			break;
		}
		case DEBOUNCE_BUTTON_UNPRESSED :
		{
			return (sc_boolean) (stateConfVector[SCVI_DEBOUNCE_BUTTON_UNPRESSED] == DEBOUNCE_BUTTON_UNPRESSED);
			break;
		}
		case DEBOUNCE_BUTTION_PRESSED :
		{
			return (sc_boolean) (stateConfVector[SCVI_DEBOUNCE_BUTTION_PRESSED] == DEBOUNCE_BUTTION_PRESSED);
			break;
		}
		case DEBOUNCE_BUTTON_VALIDATE :
		{
			return (sc_boolean) (stateConfVector[SCVI_DEBOUNCE_BUTTON_VALIDATE] == DEBOUNCE_BUTTON_VALIDATE);
			break;
		}
		case DEBOUNCE_BUTTON_PRESSED :
		{
			return (sc_boolean) (stateConfVector[SCVI_DEBOUNCE_BUTTON_PRESSED] == DEBOUNCE_BUTTON_PRESSED);
			break;
		}
		default:
		{
			/* State is not active*/
			return false;
			break;
		}
	}
}

/* Functions for event evManualMode in interface  */
void Statechart::raiseEvManualMode()
{
	inEventQueue.push_back(new SctEvent__evManualMode(evManualMode));
        runCycle();
}
void Statechart::internal_raiseEvManualMode()
{
	evManualMode_raised = true;
}
/* Functions for event evFreeMode in interface  */
void Statechart::raiseEvFreeMode()
{
	inEventQueue.push_back(new SctEvent__evFreeMode(evFreeMode));
        runCycle();
}
void Statechart::internal_raiseEvFreeMode()
{
	evFreeMode_raised = true;
}
/* Functions for event evTimeMode in interface  */
void Statechart::raiseEvTimeMode()
{
	inEventQueue.push_back(new SctEvent__evTimeMode(evTimeMode));
        runCycle();
}
void Statechart::internal_raiseEvTimeMode()
{
	evTimeMode_raised = true;
}
/* Functions for event evButtonPressed in interface  */
void Statechart::raiseEvButtonPressed(sc_integer evButtonPressed_)
{
	inEventQueue.push_back(new SctEvent__evButtonPressed(evButtonPressed, evButtonPressed_));
        runCycle();
}
void Statechart::internal_raiseEvButtonPressed(sc_integer evButtonPressed_)
{
	evButtonPressed_value = evButtonPressed_;
	evButtonPressed_raised = true;
}
/* Functions for event evButtonUnpressed in interface  */
void Statechart::raiseEvButtonUnpressed()
{
	inEventQueue.push_back(new SctEvent__evButtonUnpressed(evButtonUnpressed));
        runCycle();
}
void Statechart::internal_raiseEvButtonUnpressed()
{
	evButtonUnpressed_raised = true;
}
/* Functions for event validEntry in interface Internal */
void Statechart::raiseValidEntry()
{
	internalEventQueue.push_back(new SctEvent_Internal_validEntry(Internal_validEntry));
        runCycle();
}
void Statechart::internal_raiseValidEntry()
{
	validEntry_raised = true;
}
sc_boolean Statechart::isRaisedValidEntry() const
{
	return validEntry_raised;
}

// implementations of all internal functions
/* Entry action for state 'BUTTION_PRESSED'. */
void Statechart::enact_DEBOUNCE_BUTTION_PRESSED()
{
	/* Entry action for state 'BUTTION_PRESSED'. */
	timerService->setTimer(this, (sc_eventid)(&timeEvents[0]), 100, false);
}

/* Entry action for state 'BUTTON_PRESSED'. */
void Statechart::enact_DEBOUNCE_BUTTON_PRESSED()
{
	/* Entry action for state 'BUTTON_PRESSED'. */
	internalEventQueue.push_back(new SctEvent_Internal_validEntry(Internal_validEntry));
	keyPressed = evButtonPressed_value;
}

/* Exit action for state 'BUTTION_PRESSED'. */
void Statechart::exact_DEBOUNCE_BUTTION_PRESSED()
{
	/* Exit action for state 'BUTTION_PRESSED'. */
	timerService->unsetTimer(this, (sc_eventid)(&timeEvents[0]));
}

/* 'default' enter sequence for state FREE_MODE */
void Statechart::enseq_FEEDER_FREE_MODE_default()
{
	/* 'default' enter sequence for state FREE_MODE */
	stateConfVector[0] = FEEDER_FREE_MODE;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state MANUAL_MODE */
void Statechart::enseq_FEEDER_MANUAL_MODE_default()
{
	/* 'default' enter sequence for state MANUAL_MODE */
	stateConfVector[0] = FEEDER_MANUAL_MODE;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state BUTTON_UNPRESSED */
void Statechart::enseq_DEBOUNCE_BUTTON_UNPRESSED_default()
{
	/* 'default' enter sequence for state BUTTON_UNPRESSED */
	stateConfVector[1] = DEBOUNCE_BUTTON_UNPRESSED;
	stateConfVectorPosition = 1;
}

/* 'default' enter sequence for state BUTTION_PRESSED */
void Statechart::enseq_DEBOUNCE_BUTTION_PRESSED_default()
{
	/* 'default' enter sequence for state BUTTION_PRESSED */
	enact_DEBOUNCE_BUTTION_PRESSED();
	stateConfVector[1] = DEBOUNCE_BUTTION_PRESSED;
	stateConfVectorPosition = 1;
}

/* 'default' enter sequence for state BUTTON_VALIDATE */
void Statechart::enseq_DEBOUNCE_BUTTON_VALIDATE_default()
{
	/* 'default' enter sequence for state BUTTON_VALIDATE */
	stateConfVector[1] = DEBOUNCE_BUTTON_VALIDATE;
	stateConfVectorPosition = 1;
}

/* 'default' enter sequence for state BUTTON_PRESSED */
void Statechart::enseq_DEBOUNCE_BUTTON_PRESSED_default()
{
	/* 'default' enter sequence for state BUTTON_PRESSED */
	enact_DEBOUNCE_BUTTON_PRESSED();
	stateConfVector[1] = DEBOUNCE_BUTTON_PRESSED;
	stateConfVectorPosition = 1;
}

/* 'default' enter sequence for region FEEDER */
void Statechart::enseq_FEEDER_default()
{
	/* 'default' enter sequence for region FEEDER */
	react_FEEDER__entry_Default();
}

/* 'default' enter sequence for region DEBOUNCE */
void Statechart::enseq_DEBOUNCE_default()
{
	/* 'default' enter sequence for region DEBOUNCE */
	react_DEBOUNCE__entry_Default();
}

/* Default exit sequence for state FREE_MODE */
void Statechart::exseq_FEEDER_FREE_MODE()
{
	/* Default exit sequence for state FREE_MODE */
	stateConfVector[0] = Statechart_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state MANUAL_MODE */
void Statechart::exseq_FEEDER_MANUAL_MODE()
{
	/* Default exit sequence for state MANUAL_MODE */
	stateConfVector[0] = Statechart_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state BUTTON_UNPRESSED */
void Statechart::exseq_DEBOUNCE_BUTTON_UNPRESSED()
{
	/* Default exit sequence for state BUTTON_UNPRESSED */
	stateConfVector[1] = Statechart_last_state;
	stateConfVectorPosition = 1;
}

/* Default exit sequence for state BUTTION_PRESSED */
void Statechart::exseq_DEBOUNCE_BUTTION_PRESSED()
{
	/* Default exit sequence for state BUTTION_PRESSED */
	stateConfVector[1] = Statechart_last_state;
	stateConfVectorPosition = 1;
	exact_DEBOUNCE_BUTTION_PRESSED();
}

/* Default exit sequence for state BUTTON_VALIDATE */
void Statechart::exseq_DEBOUNCE_BUTTON_VALIDATE()
{
	/* Default exit sequence for state BUTTON_VALIDATE */
	stateConfVector[1] = Statechart_last_state;
	stateConfVectorPosition = 1;
}

/* Default exit sequence for state BUTTON_PRESSED */
void Statechart::exseq_DEBOUNCE_BUTTON_PRESSED()
{
	/* Default exit sequence for state BUTTON_PRESSED */
	stateConfVector[1] = Statechart_last_state;
	stateConfVectorPosition = 1;
}

/* Default exit sequence for region FEEDER */
void Statechart::exseq_FEEDER()
{
	/* Default exit sequence for region FEEDER */
	/* Handle exit of all possible states (of Statechart.FEEDER) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case FEEDER_FREE_MODE :
		{
			exseq_FEEDER_FREE_MODE();
			break;
		}
		case FEEDER_MANUAL_MODE :
		{
			exseq_FEEDER_MANUAL_MODE();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region DEBOUNCE */
void Statechart::exseq_DEBOUNCE()
{
	/* Default exit sequence for region DEBOUNCE */
	/* Handle exit of all possible states (of Statechart.DEBOUNCE) at position 1... */
	switch(stateConfVector[ 1 ])
	{
		case DEBOUNCE_BUTTON_UNPRESSED :
		{
			exseq_DEBOUNCE_BUTTON_UNPRESSED();
			break;
		}
		case DEBOUNCE_BUTTION_PRESSED :
		{
			exseq_DEBOUNCE_BUTTION_PRESSED();
			break;
		}
		case DEBOUNCE_BUTTON_VALIDATE :
		{
			exseq_DEBOUNCE_BUTTON_VALIDATE();
			break;
		}
		case DEBOUNCE_BUTTON_PRESSED :
		{
			exseq_DEBOUNCE_BUTTON_PRESSED();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default react sequence for initial entry  */
void Statechart::react_FEEDER__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_FEEDER_MANUAL_MODE_default();
}

/* Default react sequence for initial entry  */
void Statechart::react_DEBOUNCE__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_DEBOUNCE_BUTTON_UNPRESSED_default();
}

sc_integer Statechart::react(const sc_integer transitioned_before) {
	/* State machine reactions. */
	return transitioned_before;
}

sc_integer Statechart::FEEDER_FREE_MODE_react(const sc_integer transitioned_before) {
	/* The reactions of state FREE_MODE. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (evManualMode_raised)
		{ 
			exseq_FEEDER_FREE_MODE();
			enseq_FEEDER_MANUAL_MODE_default();
			transitioned_after = 0;
		} 
	} 
	return transitioned_after;
}

sc_integer Statechart::FEEDER_MANUAL_MODE_react(const sc_integer transitioned_before) {
	/* The reactions of state MANUAL_MODE. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (evFreeMode_raised)
		{ 
			exseq_FEEDER_MANUAL_MODE();
			enseq_FEEDER_FREE_MODE_default();
			transitioned_after = 0;
		} 
	} 
	return transitioned_after;
}

sc_integer Statechart::DEBOUNCE_BUTTON_UNPRESSED_react(const sc_integer transitioned_before) {
	/* The reactions of state BUTTON_UNPRESSED. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (1))
	{ 
		if (evButtonPressed_raised)
		{ 
			exseq_DEBOUNCE_BUTTON_UNPRESSED();
			enseq_DEBOUNCE_BUTTION_PRESSED_default();
			react(0);
			transitioned_after = 1;
		} 
	} 
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* If no transition was taken then execute local reactions */
		transitioned_after = react(transitioned_before);
	} 
	return transitioned_after;
}

sc_integer Statechart::DEBOUNCE_BUTTION_PRESSED_react(const sc_integer transitioned_before) {
	/* The reactions of state BUTTION_PRESSED. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (1))
	{ 
		if (timeEvents[0])
		{ 
			exseq_DEBOUNCE_BUTTION_PRESSED();
			timeEvents[0] = false;
			enseq_DEBOUNCE_BUTTON_VALIDATE_default();
			react(0);
			transitioned_after = 1;
		} 
	} 
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* If no transition was taken then execute local reactions */
		transitioned_after = react(transitioned_before);
	} 
	return transitioned_after;
}

sc_integer Statechart::DEBOUNCE_BUTTON_VALIDATE_react(const sc_integer transitioned_before) {
	/* The reactions of state BUTTON_VALIDATE. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (1))
	{ 
		if (evButtonUnpressed_raised)
		{ 
			exseq_DEBOUNCE_BUTTON_VALIDATE();
			enseq_DEBOUNCE_BUTTON_UNPRESSED_default();
			react(0);
			transitioned_after = 1;
		}  else
		{
			if (evButtonPressed_raised)
			{ 
				exseq_DEBOUNCE_BUTTON_VALIDATE();
				enseq_DEBOUNCE_BUTTON_PRESSED_default();
				react(0);
				transitioned_after = 1;
			} 
		}
	} 
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* If no transition was taken then execute local reactions */
		transitioned_after = react(transitioned_before);
	} 
	return transitioned_after;
}

sc_integer Statechart::DEBOUNCE_BUTTON_PRESSED_react(const sc_integer transitioned_before) {
	/* The reactions of state BUTTON_PRESSED. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (1))
	{ 
		if (evButtonUnpressed_raised)
		{ 
			exseq_DEBOUNCE_BUTTON_PRESSED();
			enseq_DEBOUNCE_BUTTON_UNPRESSED_default();
			react(0);
			transitioned_after = 1;
		} 
	} 
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* If no transition was taken then execute local reactions */
		transitioned_after = react(transitioned_before);
	} 
	return transitioned_after;
}

void Statechart::clearInEvents() {
	evManualMode_raised = false;
	evFreeMode_raised = false;
	evTimeMode_raised = false;
	evButtonPressed_raised = false;
	evButtonUnpressed_raised = false;
	timeEvents[0] = false;
}

void Statechart::clearInternalEvents() {
	validEntry_raised = false;
}

void Statechart::microStep() {
	sc_integer transitioned = -1;
	stateConfVectorPosition = 0;
	switch(stateConfVector[ 0 ])
	{
		case FEEDER_FREE_MODE :
		{
			transitioned = FEEDER_FREE_MODE_react(transitioned);
			break;
		}
		case FEEDER_MANUAL_MODE :
		{
			transitioned = FEEDER_MANUAL_MODE_react(transitioned);
			break;
		}
		default:
			/* do nothing */
			break;
	}
	if ((stateConfVectorPosition) < (1))
	{ 
		switch(stateConfVector[ 1 ])
		{
			case DEBOUNCE_BUTTON_UNPRESSED :
			{
				DEBOUNCE_BUTTON_UNPRESSED_react(transitioned);
				break;
			}
			case DEBOUNCE_BUTTION_PRESSED :
			{
				DEBOUNCE_BUTTION_PRESSED_react(transitioned);
				break;
			}
			case DEBOUNCE_BUTTON_VALIDATE :
			{
				DEBOUNCE_BUTTON_VALIDATE_react(transitioned);
				break;
			}
			case DEBOUNCE_BUTTON_PRESSED :
			{
				DEBOUNCE_BUTTON_PRESSED_react(transitioned);
				break;
			}
			default:
				/* do nothing */
				break;
		}
	} 
}

void Statechart::runCycle() {
	/* Performs a 'run to completion' step. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	dispatch_event(getNextEvent());
	do
	{ 
		microStep();
		clearInEvents();
		clearInternalEvents();
	} while (dispatch_event(getNextEvent()));
	isExecuting = false;
}

void Statechart::enter() {
	/* Activates the state machine. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	/* Default enter sequence for statechart Statechart */
	enseq_FEEDER_default();
	enseq_DEBOUNCE_default();
	isExecuting = false;
}

void Statechart::exit() {
	/* Deactivates the state machine. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	/* Default exit sequence for statechart Statechart */
	exseq_FEEDER();
	exseq_DEBOUNCE();
	isExecuting = false;
}

/* Can be used by the client code to trigger a run to completion step without raising an event. */
void Statechart::triggerWithoutEvent() {
	runCycle();
}


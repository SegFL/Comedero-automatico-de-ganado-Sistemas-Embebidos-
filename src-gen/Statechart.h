/** Generated by itemis CREATE code generator. */

#ifndef STATECHART_H_
#define STATECHART_H_

/*!
Forward declaration for the Statechart state machine.
*/
class Statechart;


#include <deque>
#include "sc_types.h"
#include "sc_statemachine.h"
#include "sc_eventdriven.h"
#include "sc_timer.h"

/*! \file
Header of the state machine 'Statechart'.
*/


#ifndef SCT_EVENTS_STATECHART_H
#define SCT_EVENTS_STATECHART_H
#ifndef SC_INVALID_EVENT_VALUE
#define SC_INVALID_EVENT_VALUE 0
#endif

namespace statechart_events
{
typedef enum  {
	invalid_event = SC_INVALID_EVENT_VALUE,
	evManualMode,
	evFreeMode,
	evTimeMode,
	evButtonPressed,
	evButtonUnpressed,
	Internal_validEntry,
	Statechart_DEBOUNCE_BUTTION_PRESSED_time_event_0
} StatechartEventName;

class SctEvent
{
	public:
		SctEvent(StatechartEventName name_) : name(name_){}
		virtual ~SctEvent(){}
		const StatechartEventName name;
		
};
		
template <typename T>
class TypedSctEvent : public SctEvent
{
	public:
		TypedSctEvent(StatechartEventName name_, T value_) :
			SctEvent(name_),
			value(value_)
			{}
		virtual ~TypedSctEvent(){}
		const T value;
};

class SctEvent__evManualMode : public SctEvent
{
	public:
		SctEvent__evManualMode(StatechartEventName name_) : SctEvent(name_){};
};
class SctEvent__evFreeMode : public SctEvent
{
	public:
		SctEvent__evFreeMode(StatechartEventName name_) : SctEvent(name_){};
};
class SctEvent__evTimeMode : public SctEvent
{
	public:
		SctEvent__evTimeMode(StatechartEventName name_) : SctEvent(name_){};
};
class SctEvent__evButtonPressed : public TypedSctEvent<sc_integer>
{
	public:
		SctEvent__evButtonPressed(StatechartEventName name_, sc_integer value_) :
			TypedSctEvent(name_, value_) {};
};
class SctEvent__evButtonUnpressed : public SctEvent
{
	public:
		SctEvent__evButtonUnpressed(StatechartEventName name_) : SctEvent(name_){};
};
class SctEvent_Internal_validEntry : public SctEvent
{
	public:
		SctEvent_Internal_validEntry(StatechartEventName name_) : SctEvent(name_){};
};
class TimedSctEvent : public SctEvent
{
	public:
		TimedSctEvent(StatechartEventName name_) : SctEvent(name_){};
};

}
#endif /* SCT_EVENTS_STATECHART_H */


/*! Define indices of states in the StateConfVector */
#define SCVI_FEEDER_FREE_MODE 0
#define SCVI_FEEDER_MANUAL_MODE 0
#define SCVI_DEBOUNCE_BUTTON_UNPRESSED 1
#define SCVI_DEBOUNCE_BUTTION_PRESSED 1
#define SCVI_DEBOUNCE_BUTTON_VALIDATE 1
#define SCVI_DEBOUNCE_BUTTON_PRESSED 1


class Statechart : public sc::timer::TimedInterface, public sc::EventDrivenInterface
{
	public:
		Statechart();
		
		virtual ~Statechart();
		
		/*! Enumeration of all states */ 
		typedef enum
		{
			Statechart_last_state,
			FEEDER_FREE_MODE,
			FEEDER_MANUAL_MODE,
			DEBOUNCE_BUTTON_UNPRESSED,
			DEBOUNCE_BUTTION_PRESSED,
			DEBOUNCE_BUTTON_VALIDATE,
			DEBOUNCE_BUTTON_PRESSED
		} StatechartStates;
					
		static const sc_integer numStates = 6;
		
		
		/*! Raises the in event 'evManualMode' that is defined in the default interface scope. */
		void raiseEvManualMode();
		
		/*! Raises the in event 'evFreeMode' that is defined in the default interface scope. */
		void raiseEvFreeMode();
		
		/*! Raises the in event 'evTimeMode' that is defined in the default interface scope. */
		void raiseEvTimeMode();
		
		/*! Raises the in event 'evButtonPressed' that is defined in the default interface scope. */
		void raiseEvButtonPressed(sc_integer evButtonPressed_);
		
		/*! Raises the in event 'evButtonUnpressed' that is defined in the default interface scope. */
		void raiseEvButtonUnpressed();
		
		
		/*! Can be used by the client code to trigger a run to completion step without raising an event. */
		void triggerWithoutEvent();
		/*
		 * Functions inherited from StatemachineInterface
		 */
		virtual void enter();
		
		virtual void exit();
		
		/*!
		 * Checks if the state machine is active (until 2.4.1 this method was used for states).
		 * A state machine is active if it has been entered. It is inactive if it has not been entered at all or if it has been exited.
		 */
		virtual sc_boolean isActive() const;
		
		
		/*!
		* Checks if all active states are final. 
		* If there are no active states then the state machine is considered being inactive. In this case this method returns false.
		*/
		virtual sc_boolean isFinal() const;
		
		/*! 
		 * Checks if member of the state machine must be set. For example an operation callback.
		 */
		sc_boolean check();
		
		/*
		 * Functions inherited from TimedStatemachineInterface
		 */
		virtual void setTimerService(sc::timer::TimerServiceInterface* timerService_);
		
		virtual sc::timer::TimerServiceInterface* getTimerService();
		
		virtual void raiseTimeEvent(sc_eventid event);
		
		virtual sc_integer getNumberOfParallelTimeEvents();
		
		
		
		/*! Checks if the specified state is active (until 2.4.1 the used method for states was calles isActive()). */
		sc_boolean isStateActive(StatechartStates state) const;
		
		//! number of time events used by the state machine.
		static const sc_integer timeEventsCount = 1;
		
		//! number of time events that can be active at once.
		static const sc_integer parallelTimeEventsCount = 1;
		
		
	protected:
		
		
	private:
		Statechart(const Statechart &rhs);
		Statechart& operator=(const Statechart&);
		
		/*! Raises the in event 'evManualMode' that is defined in the default interface scope. */
		void internal_raiseEvManualMode();
		sc_boolean evManualMode_raised;
		/*! Raises the in event 'evFreeMode' that is defined in the default interface scope. */
		void internal_raiseEvFreeMode();
		sc_boolean evFreeMode_raised;
		/*! Raises the in event 'evTimeMode' that is defined in the default interface scope. */
		void internal_raiseEvTimeMode();
		sc_boolean evTimeMode_raised;
		/*! Raises the in event 'evButtonPressed' that is defined in the default interface scope. */
		void internal_raiseEvButtonPressed(sc_integer evButtonPressed_);
		sc_boolean evButtonPressed_raised;
		sc_integer evButtonPressed_value;
		/*! Raises the in event 'evButtonUnpressed' that is defined in the default interface scope. */
		void internal_raiseEvButtonUnpressed();
		sc_boolean evButtonUnpressed_raised;
		sc_boolean iface_dispatch_event(statechart_events::SctEvent * event);
		
		/*! Raises the in event 'validEntry' that is defined in the internal scope. */
		void internal_raiseValidEntry();
		sc_boolean validEntry_raised;
		sc_integer keyPressed;
		sc_boolean internal_dispatch_event(statechart_events::SctEvent * event);
		
		
		//! the maximum number of orthogonal states defines the dimension of the state configuration vector.
		static const sc_ushort maxOrthogonalStates = 2;
		
		sc::timer::TimerServiceInterface* timerService;
		sc_boolean timeEvents[timeEventsCount];
		
		
		StatechartStates stateConfVector[maxOrthogonalStates];
		
		
		
		
		sc_boolean isExecuting;
		sc_integer stateConfVectorPosition;
		
		
		/*! Raises the local event 'validEntry' that is defined in the internal scope. */
		void raiseValidEntry();
		
		/*! Checks if the local event 'validEntry' that is defined in the internal scope has been raised. */
		sc_boolean isRaisedValidEntry() const;
		
		
		// prototypes of all internal functions
		
		void enact_DEBOUNCE_BUTTION_PRESSED();
		void enact_DEBOUNCE_BUTTON_PRESSED();
		void exact_DEBOUNCE_BUTTION_PRESSED();
		void enseq_FEEDER_FREE_MODE_default();
		void enseq_FEEDER_MANUAL_MODE_default();
		void enseq_DEBOUNCE_BUTTON_UNPRESSED_default();
		void enseq_DEBOUNCE_BUTTION_PRESSED_default();
		void enseq_DEBOUNCE_BUTTON_VALIDATE_default();
		void enseq_DEBOUNCE_BUTTON_PRESSED_default();
		void enseq_FEEDER_default();
		void enseq_DEBOUNCE_default();
		void exseq_FEEDER_FREE_MODE();
		void exseq_FEEDER_MANUAL_MODE();
		void exseq_DEBOUNCE_BUTTON_UNPRESSED();
		void exseq_DEBOUNCE_BUTTION_PRESSED();
		void exseq_DEBOUNCE_BUTTON_VALIDATE();
		void exseq_DEBOUNCE_BUTTON_PRESSED();
		void exseq_FEEDER();
		void exseq_DEBOUNCE();
		void react_FEEDER__entry_Default();
		void react_DEBOUNCE__entry_Default();
		sc_integer react(const sc_integer transitioned_before);
		sc_integer FEEDER_FREE_MODE_react(const sc_integer transitioned_before);
		sc_integer FEEDER_MANUAL_MODE_react(const sc_integer transitioned_before);
		sc_integer DEBOUNCE_BUTTON_UNPRESSED_react(const sc_integer transitioned_before);
		sc_integer DEBOUNCE_BUTTION_PRESSED_react(const sc_integer transitioned_before);
		sc_integer DEBOUNCE_BUTTON_VALIDATE_react(const sc_integer transitioned_before);
		sc_integer DEBOUNCE_BUTTON_PRESSED_react(const sc_integer transitioned_before);
		void clearInEvents();
		void clearInternalEvents();
		void microStep();
		void runCycle();
		
		
		std::deque<statechart_events::SctEvent*> internalEventQueue;
		statechart_events::SctEvent* getNextEvent();
		sc_boolean dispatch_event(statechart_events::SctEvent * event);
		statechart_events::StatechartEventName getTimedEventName(sc_eventid evid);
		std::deque<statechart_events::SctEvent*> inEventQueue;
		
		
};




#endif /* STATECHART_H_ */
